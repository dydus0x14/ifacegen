/**
 * @generated
 *
 * AUTOGENERATED. DO NOT EDIT! 
 *
 */

#import "git.h"
#import "IFHTTPTransport.h"
#import "IFServiceClient+Protected.h" 

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused"
#pragma clang diagnostic ignored "-Wundeclared-selector"

static const NSUInteger jsonFormatOption = 
#ifdef DEBUG
	NSJSONWritingPrettyPrinted;
#else
	0;
#endif



@implementation git
- (GitPublicUser*)userWithUserName:(NSString*)userName
	andError:(NSError* __autoreleasing*)error {
	id tmp;

	NSData* jsonData = nil;
	if ( ![(IFHTTPTransport*)self.transport writeAll:jsonData endpoint:[NSString stringWithFormat:@"users/%@", userName] method:IFHTTPMETHOD_GET error:error] ) {
		return nil;
	}
	NSData* outputData = [self.transport readAll];
	if ( outputData == nil ) {
		return nil;
	}
	id output = [NSJSONSerialization JSONObjectWithData:outputData options:NSJSONReadingAllowFragments error:error];
	if ( error && *error != nil ) {
		return nil;
	}
	return [[GitPublicUser alloc] initWithDictionary:output error:error];
}

- (NSArray*)reposWithUserName:(NSString*)userName
	andError:(NSError* __autoreleasing*)error {
	id tmp;

	NSData* jsonData = nil;
	if ( ![(IFHTTPTransport*)self.transport writeAll:jsonData endpoint:[NSString stringWithFormat:@"users/%@/repos", userName] method:IFHTTPMETHOD_GET error:error] ) {
		return nil;
	}
	NSData* outputData = [self.transport readAll];
	if ( outputData == nil ) {
		return nil;
	}
	id output = [NSJSONSerialization JSONObjectWithData:outputData options:NSJSONReadingAllowFragments error:error];
	if ( error && *error != nil ) {
		return nil;
	}
	return ^NSArray*(id inObj) {
				NSMutableArray* items;
				if ( inObj == nil ||  [inObj isEqual:[NSNull null]] || ![inObj isKindOfClass:NSArray.class]) return nil;
				NSArray* inArr = (NSArray*)inObj;
				items = [NSMutableArray arrayWithCapacity:inArr.count];
				for ( id item in inArr ) { id tmp; [items addObject:[[GitRepo alloc] initWithDictionary:item error:error]]; }
				return items;
			}( output );
}

@end


#pragma clang diagnostic pop

